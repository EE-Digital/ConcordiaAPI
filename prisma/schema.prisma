// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  profileUrl String?  @db.VarChar(255)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  messages Message[]
  tokens Token[]
  roles Role[]
}

model Token {
  token     String @id 
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Message {
  id        String    @id @default(cuid())
  text      String    @db.VarChar(255)
  author    User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId  String?
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt


  @@index(fields: [createdAt])
}

model Channel {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(255)
  description String?   @db.VarChar(255)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  messages  Message[]
  permissions Permission[]
}

model Role {
  title   String  @id
  
  users   User[]
  permissions Permission[]
}

model Permission {
  id          String      @id @default(cuid())
  role        Role        @relation(fields: [roleId], references: [title], onDelete: Cascade, onUpdate: Cascade)
  roleId      String
  channel     Channel?     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   String?
  permission  Permissions
  state       PermissionState

  @@index([roleId, channelId, permission], name: "role_channel_permission")
}

enum Permissions {
  MESSAGE_SEND  
  MESSAGE_DELETE

  CHANNEL_CREATE
  CHANNEL_READ
  CHANNEL_UPDATE
  CHANNEL_DELETE

  ROLE_CREATE
  ROLE_READ
  ROLE_UPDATE
  ROLE_DELETE
}

enum PermissionState {
  ALLOW
  INHERIT
  DENY
}
